{"name":"Angular-tutorial","tagline":"AngularJS 教學","body":"### Angular 基本介紹.\r\nAngularJS 是一個 Javascript 的前端框架，藉著自訂 HTML Tag 或 Attribute 來擴展 HTML 的功能並建立成自己的 Component 來達到模組化。\r\n\r\n另外最重要的特色為 Template 與 Model 是自動的 two-way binding，也就是異動 Model 時會自動更新 Template 上相對的欄位而反之亦然，這樣的特色得以讓工程師從 JQuery style 必須處理所有繁瑣細節中解脫，變成一次只需要專注於資料的操作或畫面的設計即可。\r\n\r\n以下將開始依序介紹 AngularJS 的幾個重要功能，看完本教學後各位應該就能夠將 AngularJS 應用在各種專案中。\r\n\r\n### Template 與 Data Binding\r\n\r\n    <div ng-app ng-init=\"qty=1;cost=2\">\r\n        <b>Invoice:</b>\r\n\r\n        <div>\r\n            Quantity: <input type=\"number\" min=\"0\" ng-model=\"qty\">\r\n        </div>\r\n\r\n        <div>\r\n            Costs: <input type=\"number\" min=\"0\" ng-model=\"cost\">\r\n        </div>\r\n\r\n        <div>\r\n            <b>Total:</b> {{qty * cost | currency}}\r\n        </div>\r\n    </div>\r\n\r\n這是一個基本的 Model 與 Template binding 的模式，Model 在 AngularJS 被稱為 Scope，往後的說明我們都會改用 Scope 代替 Model。\r\n裡面所看到的所有 ng-xxx 都是 AngularJS 內建的元件，又被稱為 Directive，Directive 的詳細介紹我們留到稍後再做說明，這裡僅介紹有用到的 Directive。\r\n\r\n第一個看到的是ng-app，用來標注這個 Tag 以及其子節點需要 AngularJS 幫我們控管與處理，頁面上最少會有一個ng-app。\r\n\r\nng-init 內可以執行一些基本的 script，原則上不太會使用到這個 Directive，這裡是用來初始化 model 的值。\r\n\r\n再往下看會看到兩個 input 上都有 ng-model，這是重要的 Directive，任何 type 的 input 欄位加上 ng-model 後，input 的值就會和 ng-model 裡定義的 Scope 欄位名稱自動作 binding。\r\n\r\n最後看到 {{ }}，這是個 Expressions，Expressions 內的語法跟 Javascript 差不多, 可以執行運算或呼叫 Function，和 Javascript 的差別為以下幾點：\r\n\r\n- Context: Expressions 的 context 是 Scope，Javascript 是 window\r\n- Null or Undefined Value 錯誤: Expressions 內如果有欄位是 null 或 undefined 不會造成錯誤，Javascript則會丟出 Error\r\n- Flow Control: Expression 內無法使用任何條件判斷式、迴圈以及 try catch\r\n- Expressions 內無法宣告 Function，Regexp，也無法使用逗點符號以及 void\r\n- Expressions 可以加上 Filters 幫 結果值做額外的處理\r\n\r\n    {{qty * cost | currency}}\r\n\r\n這裡的 Expressions 就是把 model 內的 qty 和 cost 相乘後再交給 currency 這個 Filter 加上 $ 字號。\r\n\r\n內建的 [FIlter](https://docs.angularjs.org/api/ng/filter) 和自己建立 [Custom Filter](https://docs.angularjs.org/guide/filter) 都相當簡單，請自行查詢，本教學不多做解釋。\r\n\r\n這樣就完成了一個基本的計算功能，不需要操作 DOM 做取值與賦予值的動作，下圖是此範例的 binding 邏輯。\r\n\r\n<img src=\"https://docs.angularjs.org/img/guide/concepts-databinding1.png\"/>\r\n\r\n### Controller\r\n\r\n    <script type=\"text/javascript\">\r\n        var app = angular.module(\"myApp\", [])\r\n        app.controller(\"myController\", ['$scope', function($scope){\r\n            $scope.qty = 1;\r\n            $scope.cost = 2;\r\n        }])\r\n    </script>\r\n\r\n    <div ng-app=\"myApp\" ng-controller=\"myController\">\r\n        <b>Invoice:</b>\r\n\r\n        <div>\r\n            Quantity: <input type=\"number\" min=\"0\" ng-model=\"qty\">\r\n        </div>\r\n\r\n        <div>\r\n            Costs: <input type=\"number\" min=\"0\" ng-model=\"cost\">\r\n        </div>\r\n\r\n        <div>\r\n            <b>Total:</b> {{qty * cost | currency}}\r\n        </div>\r\n    </div>\r\n\r\n雖然不一定要有 module 才能使用 controller，但為了方便往後程式擴展的維護，還是習慣都使用 module 比較好\r\n\r\n所以首先我們給 ng-app 一個 myApp 的值，表示內容交由 myApp 這個 Module 處理\r\n\r\nModule 的宣告方法如下：\r\n\r\n    angular.module( \"moduleName\", [dependencies, ...])\r\n\r\n請記得就算不需要 reqiure 其他 module, 第二個參數也需要給空陣列[]，如果沒有給第二個參數會變成get module，而不是 define module。\r\n\r\n然後加上ng-controller，加上 ng-controller 後 Angular 會幫我們在這個 node 上建立一個 scope，稍後我們可以在 Controller 內將這個 scope inject 進來並賦予初始值。\r\n\r\nController 的宣告方法如下：\r\n\r\n    app.controller( \"controllerName\", function(serviceName, ...){\r\n        ...\r\n    })\r\n\r\n但上述方法如果有使用 ugilfy 或 closure compiler 的話 serviceName 會編譯成亂碼而找不到正確要 inject 的 service 名稱變得無法執行，所以建議用下述比較嚴謹的方法\r\n\r\n    app.controller( \"controllerName\", ['serviceName', ..., function(serviceNameObj, ...){\r\n        ...\r\n    }])\r\n\r\nAngular 內建的 servie 相當多，可以自行到 [API](https://docs.angularjs.org/api) 查詢，我們需要 inject 是 $scope 這個 service，所以把他 inject 進來\r\n\r\n    app.controller(\"myController\", ['$scope', function($scope){\r\n        ...\r\n    }])\r\n\r\nController 可以視為 constructor， 所以初始值的賦予都會寫在這裡，我們開始設定 scope 的初始值\r\n\r\n    $scope.qty = 1;\r\n    $scope.cost = 2;\r\n\r\n因為 template 和 scope 是自動的 two-way binding，template 上應該一開始就會有我們在這裡設定的值了，這樣就完成了加上 Controller的動作。\r\n\r\n下面是加上 Controller 後的邏輯示意圖\r\n\r\n<img src=\"https://docs.angularjs.org/img/guide/concepts-databinding2.png\"/>\r\n\r\n注意到這個示意圖的 ng-controller 內是用 controllerName as aliasName 的形式，所以他的 Controller 宣告內沒有使用 $scope 這個 service，而是改用 Controller 本身 this 來代替，binding邏輯是一樣的，想了解這個用法的話可以 google controller as 或者是 bindToController。\r\n\r\n接下來我們就可以試著把 cost 的值改成由 AJAX 的方式抓取，angular 的 AJAX service 是 $http，所以 controller 可以改成\r\n\r\n     app.controller(\"myController\", ['$scope', '$http', function($scope, $http){\r\n         $scope.qty = 1;\r\n         $scope.cost = $http.get(\"urlPath\");\r\n     }])\r\n\r\n$http service 會回傳一個 $q 的物件，[$q](https://docs.angularjs.org/api/ng/service/$q) 是 Angular 內建的 [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) service，當 AJAX 的結果回傳後 scope 會自動解析出 Promise 的值並一樣會自動 binding 到 template 上。\r\n\r\n### Service\r\n\r\n我們已經使用過了 Angular 內建的 $scope 和 $http service 了，現在來了解一下 service 的特性與用途。\r\n\r\nservice 的宣告方式如下：\r\n\r\n    app.factory(\"serviceName\", ['requiredServiceName', ... , function(requiredServiceObj, ...){\r\n        ...\r\n    }])\r\n\r\n和宣告 Controller 差不多，僅差別於使用的是 factory 這個 API, 而在 function 裡回傳了什麼就決定了這個 service 被 inject 的時候可以得到的東西。\r\n\r\n基於這個特性，我們可以用 service 來宣告物件\r\n\r\n    app.factory(\"myClassService\", [function(){\r\n        function myClass(){ }\r\n        myClass.prototype.constructor = myClass;\r\n\r\n        return myClass;\r\n    }])\r\n\r\n在不同的 Controller 間分享資料\r\n\r\n    app.factory(\"myDataService\", [function(){\r\n        return {\r\n            data: [{id: 1, value: \"one\"}, {id: 5, value: \"fifth\"}]\r\n        }\r\n    }])\r\n\r\n或者包裝複雜的邏輯，例如之前的 AJAX 取資料範例可以改成 service\r\n\r\n    app.factory(\"myAjaxService\", ['$http', '$q', function($http, $q){\r\n        return {\r\n            get: function(){\r\n                return $q(function(resolve, reject){\r\n                    $http.get(\"urlPath\")\r\n                    .then(function(result){\r\n                        if (result.data.price <= 0){\r\n                            reject(\"wrong price, should never be 0 or smaller than 0.\")\r\n                        }\r\n                        resolve(result.data.price)\r\n                    })\r\n                    .catch(function(err){\r\n                        console.log(err)\r\n                        reject(err)\r\n                    })\r\n                })\r\n            }\r\n        }\r\n    }])\r\n\r\n    app.controller(\"myController\", ['$scope', 'myAjaxService', function($scope, myAjaxService){\r\n        $scope.qty = 1;\r\n        $scope.cost = myAjaxService.get();\r\n    }])\r\n\r\n### Scope\r\n除了 Scope 與 Template 間的 two-way binding 之外，還有一些 Scope 的特性與其他常用的 API 我們也必需要知道。\r\n\r\n#### 繼承性\r\nScope 之間是有繼承關係的，每個 Angular App 都有一個叫做 rootScope 的特殊 Scope，代表的就是最底層的 Scope，而每次我們使用 ng-controller 時，Angular 就會為我們在該 node 上建立一個繼承自當前 Scope 的新 Scope，請參考以下範例。\r\n\r\n    angular.module('scopeExample', [])\r\n    .controller('FirstController', ['$scope', '$rootScope', function($scope, $rootScope) {\r\n        $rootScope.greet = 'Hello';\r\n        $scope.name = 'Nick';\r\n    }])\r\n    .controller('SecondController', ['$scope', function($scope) {\r\n        $scope.name = 'John';\r\n    }]);\r\n\r\n    <div ng-app=\"scopeExample\" class=\"scope-demo\">\r\n        <div ng-controller=\"FirstController\">\r\n            {{greet}} {{name}}!\r\n\r\n            <div ng-controller=\"SecondController\">\r\n                {{greet}} {{name}}!\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n([Fiddle](https://jsfiddle.net/fx9h2e5b/))執行後可以看到結果為\r\n\r\n    Hello Nick!\r\n    Hello John!\r\n\r\n如前述，所有 Scope 都是源自於 rootScope，所以如果我們想要設定一個所有 Scope 都要有的屬性，就可以用 $rootScope 這個 service 把 rootScope inject 進來，在 rootScope 上加上 greet 的屬性值後 FirstController 和 SecondController 內就可以存取到 greet 了。\r\n\r\n接下來我們在兩個 Controller 的 Scope 上都設定 name 這個屬性，從執行結果我們也可以得知，繼承自上層 Scope 的值是可以被 overwrite 掉的。\r\n\r\n如果想在 SecondController 內存上層的 Scope 內容，可以透過 $scope.$parent 存取，如下例。\r\n\r\n\r\n    .controller('SecondController', ['$scope', function($scope) {\r\n        $scope.name = 'John';\r\n    }]);\r\n\r\n    <div ng-controller=\"SecondController\">\r\n        {{greet}} {{name}}! (From {{$parent.name}})\r\n    </div>\r\n\r\n可以得到結果\r\n\r\n    Hello John! (From Nick)\r\n\r\n#### 事件傳遞\r\nscope 間的事件可以透過向下層傳遞的 $broadcast，或是向上傳遞的 $emit 來達到訊息的溝通，這也是 Controller 間常用的溝通方式。\r\n\r\n    angular.module('scopeExample', [])\r\n    .controller('FirstController', ['$scope', '$rootScope', function($scope, $rootScope) {\r\n        $scope.$on(\"clicked\", function(e, data){\r\n            $scope.status = data;\r\n            $scope.$broadcast(\"info\", \"acknowledge\")\r\n        })\r\n    }])\r\n    .controller('SecondController', ['$scope', function($scope) {\r\n        $scope.click = function(){\r\n            $scope.$emit(\"clicked\", \"I'm clicked.\")\r\n        }\r\n\r\n        $scope.$on(\"info\", function(e, data){\r\n            $scope.info = data;\r\n        })\r\n    }]);\r\n\r\n    <div ng-app=\"scopeExample\" class=\"scope-demo\">\r\n        <div ng-controller=\"FirstController\">\r\n            Message From SecondController: {{status}}\r\n\r\n            <div ng-controller=\"SecondController\">\r\n                Message From FirstController: {{info}}\r\n                <div><button ng-click=\"click()\">Click Me</button></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n([Fiddle](https://jsfiddle.net/d12exLcy/1/))執行並點選 button 後可以看到\r\n\r\n    Message From SecondController: I'm clicked.\r\n    Message From FirstController: acknowledge\r\n\r\n這個範例裡我們順便用到了 ng-click 這個 Directive, 基本上看名字就知道這個是監聽 click 的事件，和原本的 Javascript 的 event 差不多，只是 context 變成 scope 而已。\r\n\r\n我們在 click function 內使用 $scope.$emit(\"eventName\", yourData) 來向 FirstController 傳遞事件，而在 FirstController 內必須要用 $scope.$on(\"eventName\", function(event, yourData){ ... }) 來接收事件。\r\n\r\n接收事件的 function 第一個參數為 event object，當頁面上同時有使用 jQuery 時就是會若無則會 jQuery 的 event object，若無則會是 jqLite 的 event Object，所以也有 stopPropagation 可以用。\r\n\r\n第二個參數是收到的 data，任意資料型態都可以，就再不多作說明。\r\n\r\n#### $watch, $watchGroup, $watchCollection\r\n$watch 也是 scope 裡常用的 API，使用方法如下例\r\n\r\n    angular.module('scopeExample', [])\r\n    .controller('FirstController', ['$scope', '$rootScope', function($scope, $rootScope) {\r\n        $scope.value = 0;\r\n\r\n        $scope.$watch(\"value\", function(newVal, oldVal){\r\n            if (newVal > 3){\r\n                $scope.value = 0;\r\n            }\r\n        })\r\n\r\n        $scope.$on(\"addValue\", function(e, data){\r\n            $scope.value++;\r\n        })\r\n    }])\r\n    .controller('SecondController', ['$scope', function($scope) {\r\n        $scope.add = function(){\r\n            $scope.$emit(\"addValue\");\r\n        }\r\n    }]);\r\n\r\n    <div ng-app=\"scopeExample\" class=\"scope-demo\">\r\n        <div ng-controller=\"FirstController\">\r\n            Value: {{value}}\r\n\r\n            <div ng-controller=\"SecondController\">\r\n                <div><button ng-click=\"add()\">add</button></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n([Fiddle](https://jsfiddle.net/sd9fy7x1/)) 執行後可以看到 value 加到三之後會重新歸零。\r\n\r\n所以 $watch 就是監測 scope 屬性值的變動，可以想成是 scope 的 change 事件，$watch 的第一個參數是要監視的 scope 屬性名稱，在這裡要監視的就是 scope.value，所以使用\r\n\r\n    $scope.$watch(\"value\", function(newValue, oldValue){ ... })\r\n\r\n而第二個參數就是處理變動的 function，function 收到的第一個參數是變動後新的值，第二個就是變動前的值，本例就是判斷新值大於3時將 value 改回1而已。\r\n\r\n    $scope.$watch(\"value\", function(newVal, oldVal){\r\n        if (newVal > 3){\r\n            $scope.value = 0;\r\n        }\r\n    })\r\n\r\n這樣大家應該可以對 $watch 有基本的認識，另外一個 $watchGroup 只是一次可以監視多個屬性值，function 收到的 newValue 和 oldValue 都變成 array 而已。\r\n\r\n([Fiddle](https://jsfiddle.net/rtwjs2f7/))\r\n\r\n    angular.module('scopeExample', [])\r\n    .controller('FirstController', ['$scope', '$rootScope', function($scope, $rootScope) {\r\n        $scope.value = 0;\r\n        $scope.value2 = 0;\r\n\r\n        $scope.$watchGroup([\"value\", \"value2\"], function(newVals, oldVals){\r\n            if (newVals[0] > 3){\r\n                $scope.value = 0;\r\n            }\r\n        })\r\n\r\n        $scope.$on(\"addValue\", function(e, data){\r\n            $scope.value++;\r\n        })\r\n    }])\r\n    .controller('SecondController', ['$scope', function($scope) {\r\n        $scope.add = function(){\r\n            $scope.$emit(\"addValue\");\r\n        }\r\n    }]);\r\n\r\n    <div ng-app=\"scopeExample\" class=\"scope-demo\">\r\n        <div ng-controller=\"FirstController\">\r\n            Value: {{value}}\r\n\r\n            <div ng-controller=\"SecondController\">\r\n                <div><button ng-click=\"add()\">add</button></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n如果要監視的屬性值是個 Object 或是 array，那最後一個 $watchCollection 就可以派上用場了。\r\n\r\n([Fiddle](https://jsfiddle.net/jo6gryjb/))\r\n\r\n    angular.module('scopeExample', [])\r\n    .controller('FirstController', ['$scope', '$rootScope', function($scope, $rootScope) {\r\n        $scope.items = [];\r\n\r\n        $scope.$watchCollection(\"items\", function(newVal, oldVal){\r\n            if (newVal.length > 3){\r\n                $scope.items = [];\r\n            }\r\n        })\r\n\r\n        $scope.$on(\"addItem\", function(e, data){\r\n            $scope.items.push({});\r\n        })\r\n    }])\r\n    .controller('SecondController', ['$scope', function($scope) {\r\n        $scope.add = function(){\r\n            $scope.$emit(\"addItem\");\r\n        }\r\n    }]);\r\n\r\n    <div ng-app=\"scopeExample\" class=\"scope-demo\">\r\n        <div ng-controller=\"FirstController\">\r\n            items length: {{items.length}}\r\n\r\n            <div ng-controller=\"SecondController\">\r\n                <div><button ng-click=\"add()\">add</button></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n$watch 這個 API 在把 jQuery 元件包裝成 Directive 可以說是必定會用到的功能，在這個狀況下也一定會同時用到 $apply，這算是比較進階的課題，就留給大家自行研究了，$scope 相關 API 可以至 [$scope](https://docs.angularjs.org/api/ng/type/$rootScope.Scope) 查詢。\r\n\r\n### Directive\r\n最後一個議題就是我們一直說到的 Directive，我們先前已經用過一些 ng-xxx 等內建的 Directive，這些 Directie 大多著重在資料面，而沒有 Template 的部分，一般來說大部分的 Directive 都會同時包裝 Template 與 scope 而成為一個獨立的元件來使用，以下提供一個簡單的例子。\r\n\r\n    angular.module('directiveExample', [])\r\n    .controller('gridController', ['$scope', function($scope) {\r\n        $scope.add = function(){\r\n            $scope.gridData.push({});\r\n        }\r\n\r\n        $scope.save = function(){\r\n            if (!angular.isUndefined($scope.gridSave)){\r\n                $scope.gridSave($scope.gridData);\r\n            }\r\n        }\r\n    }])\r\n    .directive('myGrid', [function() {\r\n        return {\r\n            restrict: 'A',\r\n            scope: {\r\n                gridData: \"=\",\r\n                gridSave: \"=?myGridSave\"\r\n            },\r\n            controller: \"gridController\",\r\n            template: \r\n                '<table class=\"table table-striped\">' +\r\n                '   <thead>' +\r\n                '       <tr>' +\r\n                '           <td colspan=\"2\">' +\r\n                '               <button class=\"btn btn-info\" ng-click=\"add()\">add</td>' +\r\n                '               <button class=\"btn btn-primary\" ng-click=\"save()\">save</td>' +\r\n                '           </td>' +\r\n                '       </tr>' +\r\n                '   </thead>' +\r\n                '   <tbody>' +\r\n                '       <tr ng-repeat=\"row in gridData\">' +\r\n                '           <td><input type=\"text\" ng-model=\"row.id\"/></td>' +\r\n                '           <td><input type=\"text\" ng-model=\"row.desc\"/></td>' +\r\n                '       </tr>' +\r\n                '   </tbody>' +\r\n                '</table>',\r\n            link: function(scope, el, attrs){\r\n                el.addClass(\"my-grid-pane\");\r\n            }\r\n        }\r\n    }])\r\n    .controller('myController', ['$scope', '$window', function($scope, $window) {\r\n        $scope.data = [{id: 1, desc: \"todo 1\"}, {id: 2, desc: \"todo 2\"}];\r\n\r\n        $scope.save = function(data){\r\n            $window.alert(JSON.stringify(data));\r\n        }\r\n    }])\r\n\r\n    <div ng-app=\"directiveExample\" class=\"scope-demo\">\r\n        <div ng-controller=\"myController\">\r\n            <div class=\"grid-pane\" my-grid grid-data=\"data\" my-grid-save=\"save\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n([Fiddle](https://jsfiddle.net/tc1q76sr/))\r\n\r\n這是個可以編輯的 grid 元件，寫一個可編輯的 grid 一直不是件簡單的事，但是用 angular 實作就是那麼簡單，扣掉 Template 的部分不到 30 行程式碼就完成了。\r\n\r\n宣告 Directive 的方式也跟 Controller 差不多，只是改用 app.directive，也可以 inject 額外的 service 進來，$parse 和 $compile 這兩個 service 都算是有機會用到，有興趣的人可以自行查看，\r\ndirective 的 function 原則上是回傳一個定義 directive 的 object，因為 directive 的屬性太多且有些部分比較複雜，後面只會解釋有用到的屬性，待各位對 Angular 有足夠熟悉後再去研究就可以了，在 [這裡](https://docs.angularjs.org/api/ng/service/$compile) 可以查到完整的資訊。\r\n\r\n首先看到了我宣告了一個叫 myGrid 的 directive，這裡要注意名稱大小寫和實際要使用時會有點不同，在 template 上引用這個元件時要用 my-grid。\r\n\r\n    .directive('myGrid', [function() { ...} ])\r\n\r\n    <div class=\"grid-pane\" my-grid grid-data=\"data\" my-grid-save=\"save\"></div>\r\n\r\n這是因為在 html 上 tag name 和 attribute 是都是視為小寫的，所以在 template 上使用時大小的字要改成小寫並在前面加上 - 號，Angular 內部會自己轉換成正確的 directive 名稱。\r\n\r\n接下來就開始設定屬性，我們先接紹完用到的屬性後再開始解釋程式碼：\r\n\r\n#### restrict\r\n決定引用 directive 的方式，可以用 tag name (E) 也可以用 attribute (A)，其他還有 class name 和 comment，但一般不太會用到，預設值是 E，附上官網說明應該就很清楚了。\r\n\r\n    E - Element name (default): <my-directive></my-directive>\r\n    A - Attribute (default): <div my-directive=\"exp\"></div>\r\n    C - Class: <div class=\"my-directive: exp;\"></div>\r\n    M - Comment: <!-- directive: my-directive exp -->\r\n\r\n#### scope \r\nscope 比較複雜，directive 的 scope 值可以定義成三種型態\r\n\r\n* false 表示不建立新的 scope，直接使用當前的 scope。\r\n* true 建立一個繼承至當前 scope 的新 scope。\r\n* {} Object 如果給的是一個 object，會建立一個不繼承任何 scope 的 isolate scope\r\n\r\n前兩個都很單純，應該就不用再解釋，而 isolate scope 有幾個特殊的符號要熟記，這裡也用官網的例子。\r\n\r\n##### @ or @attr or @?attr\r\n表示 scope 上的屬性值要 bind 到指定的 dom 上的 attribute 值，如\r\n\r\n    <widget my-attr=\"hello {{name}}\">\r\n\r\n    scope: { localName:'@myAttr' }\r\n\r\n當前 name 的值是 Nick，那麼 directive 裡面的 scope.localName 就會是 hello Nick，name 改變時 localName 也會自動改變，如果 dom 上 attribute 的名稱和 scope 的名稱相同，就可以用偷懶的寫法，dom attribute 的名稱可以省略。\r\n\r\n    <widget local-name=\"hello {{name}}\">\r\n\r\n    scope: { localName:'@' }\r\n\r\n另外也要注意 dom 上的 attribute 名稱和 scope attribute 大小寫之間的關係是和 directive 名稱的特性是一樣的，取不到值時先檢查 dom 是不是上忘記把大寫改成 -小寫 可以省下你不少時間。\r\n\r\n加上 ? 表示這個屬性是 optional。\r\n\r\n##### = or =attr or @?attr\r\nbi-direction binding，也就是在 directive 內或外改變這個值都會同時更改另一方。\r\n\r\n    <widget my-attr=\"parentModel\">\r\n\r\n    scope: { localModel:'=myAttr' }\r\n\r\n這裡要注意 dom 上不是用 expressions {{}}，而是直接用屬性名稱就好。\r\n\r\n##### & or &attr or &?attr\r\n定義方式差不多。\r\n\r\n    <widget my-attr=\"count = count + value\">\r\n\r\n    scope: { localFn:'&myAttr' }\r\n\r\n看官網範例應該就能了解用法。\r\n\r\n    provides a way to execute an expression in the context of the parent scope\r\n\r\n    if the expression is increment(amount)\r\n\r\n    then we can specify the amount value by calling the localFn as localFn({amount: 22})\r\n\r\n#### controller\r\ncoontroller名稱，不一定要另外宣告 Controller，也可以直接寫在 link 裡就好，看個人習慣與是否有用到 require 這個屬性，被 required 的 directive 基本上 Controller 都需要另外拉出來。 \r\n\r\n#### template\r\n如果是用字串直接內嵌的 html 就用 template，如果 html 是在另外一個 xxx.html 檔案就要改用 templateUrl，或者有用 grunt module html2js 的話也是用 templateUrl。\r\n\r\n#### link\r\nlink 是 scope 已經 bind 到 template 後會被執行的 function，在這裡才可以開始做 dom 的操作或事件動作，例如一個可以拖拉改變位置的元件就會在這裡寫mousedown mousemove mouseup時改變位置的邏輯。\r\nfunction 接收5個值，常用的是前面三個。\r\n\r\n    function link(scope, el, attrs, controller, transcludeFn) { ... }\r\n\r\nscope 就是 directive 的 scope\r\n\r\nel 就是 directive 本身最上層的 dom\r\n\r\nattrs 就是 el 上所有的 attributes，Angular 幫我們變成一個 object 方便存取，所以也可以透過 attrs 手動作額外的 binding。\r\n\r\n另外兩個算進階用法，請自行到官網查詢。\r\n\r\n以上解釋完用到屬性，接著要繼續解釋我們的 myGrid 。\r\n\r\n    restrict: 'A'\r\n\r\n設定成只能用attribute 的方式引用\r\n\r\n    scope: {\r\n        gridData: \"=\",\r\n        gridSave: \"=?myGridSave\"\r\n    }\r\n\r\nscope 使用 isolate scope，兩個屬性都是 bi-direction binding，gridData 是資料來源，在要引用 myGrid 的 node 上必須同時設定這個屬性，不然會丟出 error，我們要把 myController scope 上的 data binding 到 myGrid 上，所以也要設定好測試的用的 data。\r\n\r\n    <div class=\"grid-pane\" my-grid grid-data=\"data\"></div>\r\n\r\n    .controller('myController', ['$scope', function($scope) {\r\n        $scope.data = [{id: 1, desc: \"todo 1\"}, {id: 2, desc: \"todo 2\"}];\r\n    }]\r\n\r\n再來準備 bind 第二個屬性 gridSave，這個是 optional 的屬性，沒有設定也不會出現 eroor，先將這個屬性加上。\r\n\r\n    <div class=\"grid-pane\" my-grid grid-data=\"data\" my-grid-save=\"save\"></div>\r\n\r\n    .controller('myController', ['$scope', '$window', function($scope, $window) {\r\n        $scope.data = [{id: 1, desc: \"todo 1\"}, {id: 2, desc: \"todo 2\"}];\r\n\r\n        $scope.save = function(data){\r\n            $window.alert(JSON.stringify(data));\r\n        }\r\n    }])\r\n\r\n然後設定 controller 使用 gridController\r\n\r\n    controller: \"gridController\"\r\n\r\n    .controller('gridController', ['$scope', function($scope) {\r\n        $scope.add = function(){\r\n            $scope.gridData.push({});\r\n        }\r\n\r\n        $scope.save = function(){\r\n            if (!angular.isUndefined($scope.gridSave)){\r\n                $scope.gridSave($scope.gridData);\r\n            }\r\n        }\r\n    }])\r\n\r\n以及 template\r\n\r\n    template: \r\n        '<table class=\"table table-striped\">' +\r\n        '   <thead>' +\r\n        '       <tr>' +\r\n        '           <td colspan=\"2\">' +\r\n        '               <button class=\"btn btn-info\" ng-click=\"add()\">add</td>' +\r\n        '               <button class=\"btn btn-primary\" ng-click=\"save()\">save</td>' +\r\n        '           </td>' +\r\n        '       </tr>' +\r\n        '   </thead>' +\r\n        '   <tbody>' +\r\n        '       <tr ng-repeat=\"row in gridData\">' +\r\n        '           <td><input type=\"text\" ng-model=\"row.id\"/></td>' +\r\n        '           <td><input type=\"text\" ng-model=\"row.desc\"/></td>' +\r\n        '       </tr>' +\r\n        '   </tbody>' +\r\n        '</table>'\r\n\r\n先看到 tbody 中有一個 ng-repeat，ng-repeat 會依序取出 collection 中的 item，並複製一個 ng-repeat 所在的 dom，然後建立一個新的 scope bind 上去，並把 item 加到 scope 上，在這個 dom 上就可以存取到 item 的值，當然我們把 item 的名稱取名叫 row，存取時就要用 row.id、row.desc。\r\n\r\n    '<tr ng-repeat=\"row in gridData\">' +\r\n    '    <td><input type=\"text\" ng-model=\"row.id\"/></td>' +\r\n    '    <td><input type=\"text\" ng-model=\"row.desc\"/></td>' +\r\n    '</tr>'\r\n\r\ntemplate 中另外看到有兩個 button，add 按了之後要新增一筆空資料，save 按了應該要呼叫 binding 到 gridSave 上的外層 scope 屬性，所以我們在 gridController 中要處理這段邏輯。\r\n\r\n    '<button class=\"btn btn-info\" ng-click=\"add()\">add</td>'\r\n\r\n    $scope.add = function(){\r\n        $scope.gridData.push({});\r\n    }\r\n\r\n基本上 add 事件就對 gridData push 一個 object 就可以了。\r\n\r\n    '<button class=\"btn btn-primary\" ng-click=\"save()\">save</td>'\r\n\r\n    $scope.save = function(){\r\n        if (!angular.isUndefined($scope.gridSave)){\r\n            $scope.gridSave($scope.gridData);\r\n        }\r\n    }\r\n\r\nsave 事件我們想要把當前的資料丟回給 binding 到 gridSave 上的外部 scope function， 但這個屬性是 optional，所以要先判斷是不是 undefined 才可以呼叫，實際上 gridData 是 bi-direction binding，所以呼叫 gridSave 時是可以不用給 $scope.gridData 這個參數的，因為外層 scope 上的 data 也會一起變動，不用特別處理也可以取得當前 grid 的值，這裡只是讓大家知道 可以binding function 進來也可以正常給參數的。\r\n\r\n外部的 scope 上定義的 function 收到呼叫後跳出 alert 顯示出資料內容。\r\n\r\n    $scope.save = function(data){\r\n        $window.alert(JSON.stringify(data));\r\n    }\r\n\r\n注意到我們 inject 了 $window service ，Angular 中若要使用 javascript 的原生 API 都會使用 $window 這個 service，例如 alert、setTimeout、setInterval，這在寫 unit 的時候比較容易做 mock，除此之外 setTimeout 之中若有改變 scope 的屬性值而沒有使用 $window.setTimeout，你會發現畫面上的欄位沒有跟著變動，因為不在 Angular digest cycle 中做的數值修改是不會被偵測到的，包含先前介紹過的 $watch\r\n也會沒有反應，不然就是修改值後要再加上 $scope.$apply() 通知 Angular 有變動發生。\r\n\r\n詳細可以參照官網 [此頁](https://docs.angularjs.org/guide/scope) 最下面的 Integration with the browser event loop 章節內有說明。\r\n\r\n最後是\r\n\r\n    link: function(scope, el, attrs){\r\n        el.addClass(\"my-grid-pane\");\r\n    }\r\n\r\n這裡其實沒什麼必要加，因為我們沒有要操作 dom，僅增加一個 class 示意。\r\n\r\n### 結語\r\nAngular 的邏輯和 jQuery 或其他 framework 相差甚多，尤其熟悉 jQuery 的人可能腦筋會常常轉不過來而不知道同樣的功能要怎麼用 Directive 實作，而 Directive 可以說是 Angular 的精華所在，建議大家可以多看看 github 上的各種優秀 directive 才能更加地熟悉精進，例如 Angular 版的 [bootstrap](https://github.com/angular-ui/bootstrap) 就有各種元件的實作，大部分的 Directive 都是 100 ~ 200 行而已，相信閱讀也不會太困難。\r\n","google":"UA-70951918-1","note":"Don't delete this file! It's used internally to help with page regeneration."}